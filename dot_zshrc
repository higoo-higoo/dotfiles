# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

#!/bin/zsh
# 履歴の設定
HISTFILE="${HOME}/.zsh_history"
HISTSIZE=1000
SAVEHIST=100000
HISTORY_IGNORE="ls:cd:cd -:pwd:exit:date:* --help"

# alias
alias l='eza --icons'
alias ls=l
alias la='ls -a'
alias ll='ls -aahl'
alias lc='clear && ls'
alias tmux='tmux -u'
alias cat='ccat'
alias notify='terminal-notifier -title "Done" -message "Command finished" -sound default'

#zgen
source "${HOME}/.zgen/zgen.zsh"
if ! zgen saved; then
	# 履歴
	zgen load zsh-users/zsh-autosuggestions
	# 補完
	zgen load zsh-users/zsh-completions
	# ハイライト
	zgen load zsh-users/fast-syntax-highlighting
	# みため
  zgen load romkatv/powerlevel10k powerlevel10k
	# 保存
	zgen save
fi

# peco
function peco-src () {
  local selected_dir=$(ghq list -p | peco --query "$LBUFFER")
  if [ -n "$selected_dir" ]; then
    BUFFER="cd ${selected_dir}"
    zle accept-line
  fi
  zle clear-screen
}
zle -N peco-src

# fg
function run-fglast {
   zle push-input
   BUFFER="fg %"
   zle accept-line
}
zle -N run-fglast

# fzf
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh && source ~/.fzf/shell/key-bindings.zsh

# キーバインド
bindkey -v
bindkey '^]' peco-src
disable r

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# path
PATH=/bin:/opt/homebrew/bin:$HOME/bin:$HOME/mycommands:$HOME/.cargo/bin:/usr/local/bin:$PATH:$HOME/go/bin:$HOME/.local/bin:$HOME/.nodebrew/current/bin

# direnv
eval "$(direnv hook zsh)"

[[ -d ~/.rbenv  ]] && \
  export PATH=${HOME}/.rbenv/bin:${PATH} && \
  eval "$(rbenv init -)"

# if [[ "$(uname)" == "Darwin" ]]; then
# 	export CPLUS_INCLUDE_PATH=/opt/homebrew/include:$CPLUS_INCLUDE_PATH
# 	export CPPYGEN_LIBCLANG_PATH=/opt/homebrew/opt/llvm/lib/libclang.dylib
# 	export CPPYGEN_COMPILE_FLAGS="-nostdinc $(clang++ -x c++ -v -E /dev/null 2>&1 | grep -A 100 '<...> search starts here:' | grep -B 100 'End of search list.' | gtail --lines=+2 | ghead --lines=-1 | sed 's/(framework directory)//' | sed '/^ \.$/d' | sed 's/^/-isystem/' | tr '\n' ' ')"
# 	export CC=/opt/homebrew/opt/llvm/bin/clang
# 	export CXX=/opt/homebrew/opt/llvm/bin/clang++
# fi

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('${HOME}/miniconda3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "${HOME}/miniconda3/etc/profile.d/conda.sh" ]; then
        . "${HOME}/miniconda3/etc/profile.d/conda.sh"
    else
        export PATH="${HOME}/miniconda3/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<
# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/opt/homebrew/Caskroom/miniforge/base/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/opt/homebrew/Caskroom/miniforge/base/etc/profile.d/conda.sh" ]; then
        . "/opt/homebrew/Caskroom/miniforge/base/etc/profile.d/conda.sh"
    else
        export PATH="/opt/homebrew/Caskroom/miniforge/base/bin:$PATH"
    fi
fi
unset __conda_setup

if [ -f "/opt/homebrew/Caskroom/miniforge/base/etc/profile.d/mamba.sh" ]; then
    . "/opt/homebrew/Caskroom/miniforge/base/etc/profile.d/mamba.sh"
fi
# <<< conda initialize <<<
export STEPCI_DISABLE_ANALYTICS=1

if [ -f /opt/ros/humble/setup.zsh ]; then
  source /opt/ros/humble/setup.zsh
fi

export LIBGL_ALWAYS_INDIRECT=1

# >>> mamba initialize >>>
# !! Contents within this block are managed by 'mamba init' !!
export MAMBA_EXE='/opt/homebrew/opt/micromamba/bin/micromamba';
export MAMBA_ROOT_PREFIX='${HOME}/micromamba';
__mamba_setup="$("$MAMBA_EXE" shell hook --shell zsh --root-prefix "$MAMBA_ROOT_PREFIX" 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__mamba_setup"
else
    alias micromamba="$MAMBA_EXE"  # Fallback on help from mamba activate
fi
unset __mamba_setup
# <<< mamba initialize <<<
export PATH=$HOME/.gem/bin:$HOME/development/flutter/bin:$PATH

# Codon compiler path (added by install script)
export PATH=$HOME/.codon/bin:$PATH

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/opt/homebrew/Caskroom/miniforge/base/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/opt/homebrew/Caskroom/miniforge/base/etc/profile.d/conda.sh" ]; then
        . "/opt/homebrew/Caskroom/miniforge/base/etc/profile.d/conda.sh"
    else
        export PATH="/opt/homebrew/Caskroom/miniforge/base/bin:$PATH"
    fi
fi
unset __conda_setup

if [ -f "/opt/homebrew/Caskroom/miniforge/base/etc/profile.d/mamba.sh" ]; then
    . "/opt/homebrew/Caskroom/miniforge/base/etc/profile.d/mamba.sh"
fi
# <<< conda initialize <<<
export DYLD_FALLBACK_LIBRARY_PATH="$(brew --prefix)/lib:$DYLD_FALLBACK_LIBRARY_PATH"
export PATH=$PATH:/usr/local/texlive/2025/bin/universal-darwin:$HOME/Documents/MATLAB/mosek/11.0/tools/platform/osxaarch64/bin/

alias matlab='/Applications/MATLAB_R2025a.app/bin/matlab'


 # The next line updates PATH for the Google Cloud SDK.
 if [ -f '/Users/yuki/google-cloud-sdk/path.zsh.inc' ]; then . '/Users/yuki/google-cloud-sdk/path.zsh.inc'; fi
 
 # The next line enables shell command completion for gcloud.
 if [ -f '/Users/yuki/google-cloud-sdk/completion.zsh.inc' ]; then . '/Users/yuki/google-cloud-sdk/completion.zsh.inc'; fi


PATH="/Users/yuki/perl5/bin${PATH:+:${PATH}}"; export PATH;
PERL5LIB="/Users/yuki/perl5/lib/perl5${PERL5LIB:+:${PERL5LIB}}"; export PERL5LIB;
PERL_LOCAL_LIB_ROOT="/Users/yuki/perl5${PERL_LOCAL_LIB_ROOT:+:${PERL_LOCAL_LIB_ROOT}}"; export PERL_LOCAL_LIB_ROOT;
PERL_MB_OPT="--install_base \"/Users/yuki/perl5\""; export PERL_MB_OPT;
PERL_MM_OPT="INSTALL_BASE=/Users/yuki/perl5"; export PERL_MM_OPT;
